{"version":3,"sources":["components/NewTodo/NewTodo.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","App.js","index.js"],"names":["NewTodo","props","ChangeHandler","e","setState","task","target","value","SubmitHandler","preventDefault","state","swal","title","text","icon","create","id","nextId","completed","className","onSubmit","this","type","onChange","React","Component","Todo","removeHandler","buttons","dangerMode","then","willDelete","remove","EditHandlerValue","name","EditFormHandler","update","Edit","completedHandler","completedToggle","onClick","TodoList","NewValue","todos","filter","item","updatedValue","updatedTodo","map","todo","showTodo","App","reactDom","render","document","querySelector"],"mappings":"kVA2DeA,E,kDArDX,WAAYC,GACX,IAAD,8BACI,cAAMA,IAOVC,cAAe,SAACC,GAEZ,EAAKC,SAAS,CACVC,KAAKF,EAAEG,OAAOC,SAXtB,EAcAC,cAAgB,SAACL,GAEbA,EAAEM,iBACmB,KAAlB,EAAKC,MAAML,KAEVM,IAAK,CACDC,MAAO,QACPC,KAAM,kCACNC,KAAM,aAMb,EAAKb,MAAMc,OAAX,2BAAuB,EAAKL,OAA5B,IAAkCM,GAAGC,MAASC,WAAU,KACxDP,IAAK,CACFC,MAAO,YACPC,KAAM,8CACNC,KAAM,cA9BV,EAAKJ,MACL,CACIL,KAAK,IAJb,E,0CAoCA,WACI,OACQ,uBAAMc,UAAU,cAAcC,SAAUC,KAAKb,cAA7C,UACI,uBACAc,KAAK,OACLH,UAAU,oBACVI,SAAUF,KAAKnB,gBAEf,wBAAQoB,KAAK,SAASH,UAAU,oBAAhC,SACI,mBAAGA,UAAU,wB,GA/CfK,IAAMC,W,OC8GbC,G,wDA/GZ,WAAYzB,GACX,IAAD,8BACI,cAAMA,IAQV0B,cAAgB,WAEfhB,IAAK,CACDC,MAAO,2BAEPE,KAAM,UACNc,SAAS,EACTC,YAAY,IAEbC,MAAK,SAACC,GACDA,GACFpB,IAAK,8CAA+C,CAClDG,KAAM,YAER,EAAKb,MAAM+B,OAAO,EAAK/B,MAAMe,KAG7BL,IAAK,oCA1BZ,EA+BAsB,iBAAmB,SAAC9B,GAEnB,EAAKC,SAAL,eACKD,EAAEG,OAAO4B,KAAM/B,EAAEG,OAAOC,SAlC9B,EAsCC4B,gBAAkB,SAAChC,GAEfA,EAAEM,iBACC,EAAKC,MAAML,OAEVM,IAAK,CACDC,MAAO,YACPC,KAAM,8CACNC,KAAM,YAEV,EAAKb,MAAMmC,OAAO,EAAKnC,MAAMe,GAAG,EAAKN,MAAML,OAG/C,EAAKD,SAAS,CACViC,MAAM,EAAK3B,MAAM2B,QApD1B,EAuDCC,iBAAkB,WAGd,EAAKrC,MAAMsC,gBAAgB,EAAKtC,MAAMe,KAxDvC,EAAKN,MAAM,CACP2B,MAAK,EACLhC,KAAK,EAAKJ,MAAMI,MAJxB,E,0CA6DC,WAAU,IAAD,OA6CL,OA3CGgB,KAAKX,MAAM2B,KAGT,qBAAKlB,UAAU,OAAf,SACG,uBAAMA,UAAU,iBAAkBC,SAAUC,KAAKc,gBAAjD,UACI,uBAEAD,KAAK,OACLZ,KAAK,OACLf,MAAOc,KAAKX,MAAML,KAClBkB,SAAUF,KAAKY,mBAEf,wBAAQd,UAAU,gCAAlB,uBAUP,sBAAKA,UAAU,OAAf,UACI,oBACDA,UAAWE,KAAKpB,MAAMiB,UAAY,sBAAwB,YAC1DsB,QAASnB,KAAKiB,iBAFb,SAIAjB,KAAKpB,MAAMI,OAEZ,sBAAKc,UAAU,eAAf,UACA,wBAAQqB,QAAS,kBAAI,EAAKpC,SAAS,CAACiC,MAAK,KAAzC,SACA,mBAAGlB,UAAU,iBAGjB,wBAAQqB,QAASnB,KAAKM,cAAtB,SACA,mBAAGR,UAAU,6B,GApGNK,IAAMC,YCiGVgB,G,wDA/FX,WAAYxC,GACX,IAAD,8BACI,cAAMA,IAQVc,OAAS,SAAC2B,GAEN,EAAKtC,SAAS,CACVuC,MAAM,GAAD,mBAAK,EAAKjC,MAAMiC,OAAhB,CAAsBD,OAZnC,EAgBAV,OAAS,SAAChB,GAEN,EAAKZ,SAAS,CAEVuC,MAAM,EAAKjC,MAAMiC,MAAMC,QAAO,SAAAC,GAAI,OAAEA,EAAK7B,KAAOA,QApBxD,EAwBAoB,OAAS,SAACpB,EAAG8B,GAET,IAAMC,EAAY,EAAKrC,MAAMiC,MAAMK,KAAI,SAAAC,GAE/B,OAAGA,EAAKjC,KAAMA,EAEH,2BAAIiC,GAAX,IAAgB5C,KAAKyC,IAIdG,KAGf,EAAK7C,SACD,CACIuC,MAAOI,KAvCvB,EA2CAR,gBAAkB,SAACvB,GAEf,IAAM+B,EAAY,EAAKrC,MAAMiC,MAAMK,KAAI,SAAAC,GAE/B,OAAGA,EAAKjC,KAAMA,EAEH,2BAAIiC,GAAX,IAAiB/B,WAAY+B,EAAK/B,YAI3B+B,KAGf,EAAK7C,SACD,CACIuC,MAAOI,KAxDnB,EAAKrC,MACL,CACIiC,MAAM,IAJd,E,0CAiEA,WAAU,IAAD,OACCO,EAAS7B,KAAKX,MAAMiC,MAAMK,KAAI,SAAAH,GAE5B,OAAO,cAAC,EAAD,CAGP7B,GAAI6B,EAAK7B,GACTX,KAAMwC,EAAKxC,KACXa,UAAW2B,EAAK3B,UAChBqB,gBAAiB,EAAKA,gBACtBP,OAAQ,EAAKA,OACbI,OAAQ,EAAKA,QANRS,EAAK7B,OAUlB,OACI,sBAAKG,UAAU,WAAf,UACI,kDAGD,6BACC+B,IAEA,cAAC,EAAD,CAASnC,OAAQM,KAAKN,gB,GA1FfS,IAAMC,YCFvB0B,E,4JACJ,WACE,OAAO,gCAEL,cAAC,EAAD,IACA,oBAAIhC,UAAU,QAAd,0C,GALYK,IAAMC,WAYT0B,I,MCTfC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,cAAc,Y","file":"static/js/main.52fc4e12.chunk.js","sourcesContent":["import React from 'react';\r\nimport nextId from \"react-id-generator\";\r\nimport swal from 'sweetalert';\r\nimport \"./NewTodo.css\"\r\n\r\nclass NewTodo extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            task:''\r\n        }\r\n\r\n    }\r\n    ChangeHandler =(e)=>\r\n    {\r\n        this.setState({\r\n            task:e.target.value\r\n        })\r\n    }\r\n    SubmitHandler = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        if(this.state.task==='')\r\n        {\r\n            swal({\r\n                title: \"Error\",\r\n                text: \"Your Todo is Empty ðŸ˜¥\",\r\n                icon: \"warning\",\r\n              });\r\n        }\r\n        else\r\n\r\n        {\r\n         this.props.create( {...this.state,id:nextId(),completed:false });\r\n         swal({\r\n            title: \"Good job!\",\r\n            text: \"Your Todo Created Successfully ðŸ˜œ\",\r\n            icon: \"success\",\r\n          });\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n                <form className=\"NewTodoForm\" onSubmit={this.SubmitHandler}>\r\n                    <input \r\n                    type='text'\r\n                    className='NewTodoForm input'\r\n                    onChange={this.ChangeHandler}\r\n                    />\r\n                    <button type='submit' className='btn btn-block m-1'>\r\n                        <i className='fas fa-add'></i>\r\n                    </button>\r\n                </form>\r\n        );\r\n    }\r\n}\r\n \r\nexport default NewTodo;","import React from \"react\"\r\nimport swal from \"sweetalert\";\r\nimport \"./Todo.css\"\r\nclass Todo extends React.Component {\r\n   constructor(props)\r\n   {\r\n       super(props);\r\n       this.state={\r\n           Edit:false,\r\n           task:this.props.task\r\n       }\r\n   }\r\n   \r\n\r\n   removeHandler = () =>\r\n   {\r\n    swal({\r\n        title: \"Are You Sure To Delete ?\",\r\n      \r\n        icon: \"warning\",\r\n        buttons: true,\r\n        dangerMode: true,\r\n      })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          swal(\"Poof! Your imaginary file has been deleted!\", {\r\n            icon: \"success\",\r\n          });\r\n          this.props.remove(this.props.id)\r\n\r\n        } else {\r\n          swal(\"Your imaginary file is safe!\");\r\n        }\r\n      });\r\n   }\r\n\r\n   EditHandlerValue = (e) =>\r\n   {\r\n    this.setState({\r\n        [e.target.name]:e.target.value\r\n    })\r\n    }\r\n\r\n    EditFormHandler = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        if(this.state.task)\r\n        {\r\n            swal({\r\n                title: \"Good job!\",\r\n                text: \"You Todo Edited Successfully ! ðŸ˜™\",\r\n                icon: \"success\",\r\n            });\r\n            this.props.update(this.props.id,this.state.task)\r\n        }\r\n\r\n        this.setState({\r\n            Edit:!this.state.Edit\r\n        })\r\n    }\r\n    completedHandler =()=>\r\n    {\r\n        \r\n        this.props.completedToggle(this.props.id)\r\n       \r\n    }\r\n    render() {\r\n        let result; \r\n        if(this.state.Edit)\r\n        {\r\n            result =(\r\n             <div className='Todo'>\r\n                <form className='Todo-edit-form'  onSubmit={this.EditFormHandler}>\r\n                    <input\r\n             \r\n                    name='task'\r\n                    type='text'\r\n                    value={this.state.task}\r\n                    onChange={this.EditHandlerValue}\r\n                    />\r\n                    <button className='btn btn-primary btn-block m-1'>\r\n                        save \r\n                    </button>\r\n                </form>\r\n            </div>\r\n            )\r\n        }\r\n        else\r\n        {\r\n            result=(\r\n             <div className='Todo'>\r\n                 <li\r\n                className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n                onClick={this.completedHandler}\r\n                >\r\n                {this.props.task}\r\n                </li>\r\n                <div className='Todo-buttons'>\r\n                <button onClick={()=>this.setState({Edit:true})}>\r\n                <i className='fas fa-pen'>\r\n                </i>\r\n            </button>\r\n            <button onClick={this.removeHandler}>\r\n            <i className='fas fa-trash'>\r\n                </i>\r\n            </button>    \r\n                </div>    \r\n        </div>\r\n            )\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n \r\nexport default Todo;","import React from \"react\"\r\nimport NewTodo from \"../NewTodo/NewTodo\";\r\nimport Todo from \"../Todo/Todo\";\r\nimport \"./TodoList.css\"\r\nclass TodoList extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            todos:[]\r\n        }\r\n      \r\n    }\r\n\r\n    create = (NewValue)=>\r\n    {\r\n        this.setState({\r\n            todos:[...this.state.todos,NewValue]\r\n        })\r\n    }\r\n\r\n    remove = (id) =>\r\n    {\r\n        this.setState({\r\n            //return all without that id \r\n            todos:this.state.todos.filter(item=>item.id !== id)\r\n        })\r\n    }\r\n\r\n    update = (id,updatedValue)=>\r\n    {\r\n        const updatedTodo=this.state.todos.map(todo => \r\n            {\r\n                if(todo.id ===id)\r\n                {\r\n                    return {...todo,task:updatedValue}\r\n                }\r\n                else\r\n                {\r\n                    return todo\r\n                }\r\n            })\r\n            this.setState(\r\n                {\r\n                    todos :updatedTodo\r\n                }\r\n            )\r\n    }\r\n    completedToggle = (id) =>\r\n    {\r\n        const updatedTodo=this.state.todos.map(todo => \r\n            {\r\n                if(todo.id ===id)\r\n                {\r\n                    return {...todo, completed :!todo.completed}\r\n                }\r\n                else\r\n                {\r\n                    return todo\r\n                }\r\n            })\r\n            this.setState(\r\n                {\r\n                    todos :updatedTodo\r\n                }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const showTodo=this.state.todos.map(item=>\r\n            {\r\n                return <Todo\r\n         \r\n                key={item.id}\r\n                id={item.id}\r\n                task={item.task}\r\n                completed={item.completed}\r\n                completedToggle={this.completedToggle}\r\n                remove={this.remove}\r\n                update={this.update}\r\n                />\r\n            })\r\n            \r\n        return (\r\n            <div className='TodoList'>\r\n                <h1>\r\n                    React to do list \r\n                </h1>\r\n               <ul>\r\n               {showTodo}\r\n               </ul>\r\n                <NewTodo create={this.create}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default TodoList;","import React from 'react';\nimport TodoList from './components/TodoList/TodoList';\nclass App extends React.Component {\n  render() { \n    return <div>\n     \n      <TodoList/>\n      <h6 className='appBy'>\n        App by: Pooria Asiabi\n      </h6>\n    </div>;\n  }\n}\n \nexport default App;","import React from 'react';\nimport reactDom from 'react-dom';\nimport App from \"./App\"\nimport \"./index.css\"\n\nreactDom.render(<App/>,document.querySelector(\"#root\"))"],"sourceRoot":""}